#!/usr/bin/env node

var express = require('express'),
    //routes = require('./routes');
    browserid = require('connect-browserid'),
    mysql = require('mysql'),
    MySQLSessionStore = require('connect-mysql-session')(express)
    path = require('path'),

    conf = require('./config'),
    db = require('./lib/db'),
    userdb = require('./lib/userdb'),
    purchasedb = require('./lib/purchases');

var stripe = require('stripe')(conf.stripe_sekrit);

var app = module.exports = express.createServer();

// Configuration

app.configure(function(){
  app.set('views', __dirname);
  app.set('view engine', 'ejs');
  app.use(express.bodyParser());
  app.use(express.logger());
  app.use(express.responseTime());
  app.use(express.methodOverride());
  app.use(express.cookieParser());

  app.use(express.session({
    store: new MySQLSessionStore(conf.db_name,
                                 conf.db_user, conf.db_password, {
      checkExpirationInterval: conf.session_length
    }),
    secret: conf.session_sekrit
  }));

  app.use(browserid.authUser({ secret: conf.browserid_sekrit,
                               audience: conf.browserid_audience }));
  app.use(app.router);

/*  app.use(express.compiler({ enable: ['less'],
                             src: './css'}));*/

  app.use(express.static(__dirname));
});

app.configure('development', function(){
  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
});

app.configure('production', function(){
  app.use(express.errorHandler());
});

// Helpers
app.dynamicHelpers({
  session: function (req, res) {
    return req.session;
  },
});

app.post('/auth', browserid.auth({ next: '/register' }));

app.get('/logout', browserid.logout({ next: '/' }));

/*
  app.get('/get_user', function (req, resp, next) {
    var conn = mysql.createClient({
      user: 'root',
      password: 'pass',
    });

    conn.useDatabase('ball_of_wax', function (err, db_res) {
      if (! err) {
        userdb.get_user(conn, req.user, function (err, user) {
          console.log('User=', user);

            if (true)
              express.static(__dirname + '/public')(req, resp, next);
            else
              next();

        });
      }
    });
  });
*/

app.get('/can/:vol', function (req, resp) {

  var conn = mysql.createClient({
      user: 'root',
      password: 'pass',
  });

  conn.useDatabase('ball_of_wax', function (err, db_res) {
    if (err) {
      console.error(err);
    } else {
      purchasedb.can_play(conn, req.user, req.params.vol, function (err, canPlay) {
        if (err) {
          console.error(err);
        } else {
          console.log('vol=', req.params.vol);
          console.log('CanPlay=', canPlay);
          resp.write(canPlay.toString());
          resp.end();
        }
      });
    }
  });
});


function buy_volume(conn, email, customer_id, vol_number, cb) {
    var paydata = {
      amount: 500,
      currency: 'usd',
      customer: customer_id,
      description: 'Volume ' + vol_number
    };
    stripe.charges.create(paydata,
      function (err, charge) {
        if (err) {
          console.error(err);
        } else {
          console.log('charge info', charge);
          console.log('recording in db', charge);
          purchasedb.create_purchase(conn, email, 
                                     vol_number, 
                                     function (err, db_res) {
                                       if (err) console.error(err);
                                       cb();
            });
        }
    });
  };//buy volume

app.post('/add-payment-method', function (req, resp) {
  var vol_number = 25; // TODO should be dynamic
  var email = req.user;

/* TODO Does user exist?
      userdb.create_user(client, req.user, function (err, db_res) {
          if (err) {
            console.error('Error', err);
          } else {
            console.log('insert id', db_res.insertId);
*/

  function create_customer_purchase_volume (conn, cb) {
    var data = { email: req.user, card: req.body['stripeToken'] };
    console.log(data);
    stripe.customers.create(data,
      function (err, customer) {
        console.log('customer create', err, customer);
        if (err) {
          console.log('error', err);
          //TODO this dies...
          //throw(err);
          resp.send(err, 500);
        } else {
          console.log('customer info', customer);
            purchasedb.create_stripe_customer(conn,
                                              req.user,
                                              customer.id);
            buy_volume(conn, email, customer.id, vol_number, cb); 
        }
      }); // customer create
  }//create_customer_purchase_volume

  

    console.log('add-payment-method running');
    if (browserid.enforceLogIn(req, resp) == false) {
    console.log(req);
    console.log('calling stripe', req.body, req.user);

  db.withDb(function (err, conn, db) {
    userdb.get_user(conn, req.user, function (err, user) {
      if (err)
      {
        console.error(err);
        return resp.send(err, 500);
      }
      if (user.customer_id) {
        console.log('We have a customer id ', user);
        buy_volume(conn,
                   email,
                   user.customer_id, 
                   vol_number,
                   // Redirect ... nah... make AJAX
                   function () {return resp.redirect('/volume-1/tracks.html');}
        );
      } else {
        console.log('customer id is null, creating customer in stripe', user);
        // creates customer, saves to db, purchases tracks
        create_customer_purchase_volume(conn,
          // Redirect ... nah... make AJAX
          function () {return resp.redirect('/volume-1/tracks.html');
        });
      }
    });
  });

  } else {
    throw("User not logged in");
  }
}); //add-payment-method

// user must exist and have payment info on file
app.post('/purchase_volume/:vol', function (req, resp) {
  if (browserid.enforceLogIn(req, resp)) {
    return;
  } 
  var vol_number = req.params.vol;
  console.log("purchased volume", vol_number);

  db.withDb(function (err, conn, db) {
    if (err) {
      console.error(err);
      return resp.send(err, 500);
    }
    userdb.get_user(conn, req.user, function (err, user) {
      buy_volume(conn, user.email, user.customer_id, vol_number, 
                 function (err) {
        if (err) {
          console.error(err);
          resp.send('{error: "Error Purchasing Volume"}', 500);
        } else {
          resp.set
          resp.send('{}', {
            'Content-Type': 'application/json' 
          });
        }
      });
                                        
    });//get_user

  });//withDb
});//purchase_volume

// protected mp3 streams '/play/volume/:vol/:track'
  app.use(function (req, resp, next) {
    if (req.path.indexOf('/play') != 0) {
      return next();
    }
    var redirect = function (req, resp) {
      console.log("Redirecting");
      return resp.redirect('/licensing/pay.html');
    };
    if (browserid.enforceLogIn(req, resp)) {
      // TODO force login screen
      return; //enforeLogIn redirected
    }
    var conn = mysql.createClient({
      user: 'root',
      password: 'pass',
    });

    conn.useDatabase('ball_of_wax', function (err, db_res) {
      if (err) {
/*        console.error(err);
        return redirect(req, resp);
*/
        return next(err);
      } else {
        console.log(req.url);
        var l = '/play/volume-'.length;
        var vol = parseInt(req.url.slice(l));
        console.log(vol);
        console.log('User is ', req.user);
        purchasedb.can_play(conn, req.user, vol, function (err, canPlay) {
          if (err) {
/*            console.error(err);
            // TODO 403 access denied
            return resp.send('Access Denied', 403);
*/
            return next(err);
          } else {
            // stream vol track
            if (canPlay) {
              console.log("All clear kid, play away");
              return next();
            } else {
              console.log("Access Denied, son");
              return resp.send('Access Denied', 403);
            }
          }
        });//can_play
      } // if err
    }); // useDatabase
  });


  app.use(express.static(path.join(__dirname, '..', '/mp3s')));

// Auth

// Startup
app.listen(3099);
console.log(app.address());

console.log("Express server listening on port %d in %s mode", app.address().port, app.settings.env);